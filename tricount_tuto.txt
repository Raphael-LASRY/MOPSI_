Fichier Site_MOPSI.py fichier principal.

- Dans Operations.csv on rentre de base (à la main pour l'instant!) 
les données, càd les dépenses de chacun (1 ligne = 1 achat). 
=> Pour l'instant on calcule nous en pré-remplissant, l'idée est 
que ensuite tout ça se remplisse seul par un calcul simple en 
rentrant simplement la somme, l'acheteur, et les concernés par l'achat.
Attention! Achat de 15 devient [0,10,-5,-5,0] par ex

- Ensuite supprime le fichier dettes.csv si déjà créé

- Ensuite ça crée le fichier dettes.csv avec les bonnes dettes (positif
si on lui doit de l'argent, négatif sinon)

- On supprime results.csv et exchanges.csv si existent car le GLPK va 
les créer

- Ensuite 2 options : 
	- TricountCalculMin1.MOD calcule le nbre minimal 
	d'échanges à faire
	- TricountCalculFlow1.MOD calcule ne nbre min de flow sachant
	le nbre d'échanges
OU 
	- TricountCalculFlow2.MOD calcule le flow min
	- TricountCalculMin2.MOD calcule ne nbre min d'échanges sachant
	le flow min

- Dans results.csv et exchanges.csv sont écrits les résultats. (Si on choisit l'option n°1)
- Dans flow.csv et exchanges2.csv sont écrits les résultats. (Si on choisit l'option n°2)

#############################################################################
FICHIERS INTEGER : 

Le but est de renvoyer des échanges entiers qui minimisent le max 
des pertes dues aux arrondis

- Results_integer.csv : mêmes infos que Results mais sous forme condensée pour
faciliter la lecture de fichier

- TricountCalculFlowInteger.MOD : meme fichier que Flow1 mais résultats
sont notés dans results_integer.csv (sous forme condensée donc)

- Dettes_fourchettes : fichier de la forme : 
[ ["Patrick", sa dette si il se fait douiller à chaque arrondi, 
sa dette si il douille tout le monde à chaque arrondi], ["Gérard", ...] ... ]

- test_integer.py : le fichier .py sur la meme base que le fichier 
site.mopsi mais avec les modifs à la fin pour créer les 2 fichiers
mentionnés ci-dessus